// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelOrderCommon = "CancelOrder"

// CancelOrderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelOrderCommon operation. The "output" return
// value will be populated with the CancelOrderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelOrderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelOrderCommon Send returns without error.
//
// See CancelOrderCommon for more information on using the CancelOrderCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelOrderCommonRequest method.
//    req, resp := client.CancelOrderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) CancelOrderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelOrderCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelOrderCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation CancelOrderCommon for usage and error information.
func (c *BILLING) CancelOrderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelOrderCommonRequest(input)
	return out, req.Send()
}

// CancelOrderCommonWithContext is the same as CancelOrderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelOrderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) CancelOrderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelOrderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelOrder = "CancelOrder"

// CancelOrderRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelOrder operation. The "output" return
// value will be populated with the CancelOrderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelOrderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelOrderCommon Send returns without error.
//
// See CancelOrder for more information on using the CancelOrder
// API call, and error handling.
//
//    // Example sending a request using the CancelOrderRequest method.
//    req, resp := client.CancelOrderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) CancelOrderRequest(input *CancelOrderInput) (req *request.Request, output *CancelOrderOutput) {
	op := &request.Operation{
		Name:       opCancelOrder,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelOrderInput{}
	}

	output = &CancelOrderOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelOrder API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation CancelOrder for usage and error information.
func (c *BILLING) CancelOrder(input *CancelOrderInput) (*CancelOrderOutput, error) {
	req, out := c.CancelOrderRequest(input)
	return out, req.Send()
}

// CancelOrderWithContext is the same as CancelOrder with the addition of
// the ability to pass a context and additional request options.
//
// See CancelOrder for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) CancelOrderWithContext(ctx volcengine.Context, input *CancelOrderInput, opts ...request.Option) (*CancelOrderOutput, error) {
	req, out := c.CancelOrderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelOrderInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// OrderID is a required field
	OrderID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CancelOrderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelOrderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelOrderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelOrderInput"}
	if s.OrderID == nil {
		invalidParams.Add(request.NewErrParamRequired("OrderID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetOrderID sets the OrderID field's value.
func (s *CancelOrderInput) SetOrderID(v string) *CancelOrderInput {
	s.OrderID = &v
	return s
}

type CancelOrderOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelOrderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelOrderOutput) GoString() string {
	return s.String()
}
