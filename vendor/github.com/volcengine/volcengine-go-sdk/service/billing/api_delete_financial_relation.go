// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteFinancialRelationCommon = "DeleteFinancialRelation"

// DeleteFinancialRelationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteFinancialRelationCommon operation. The "output" return
// value will be populated with the DeleteFinancialRelationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteFinancialRelationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteFinancialRelationCommon Send returns without error.
//
// See DeleteFinancialRelationCommon for more information on using the DeleteFinancialRelationCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteFinancialRelationCommonRequest method.
//    req, resp := client.DeleteFinancialRelationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) DeleteFinancialRelationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteFinancialRelationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteFinancialRelationCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation DeleteFinancialRelationCommon for usage and error information.
func (c *BILLING) DeleteFinancialRelationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteFinancialRelationCommonRequest(input)
	return out, req.Send()
}

// DeleteFinancialRelationCommonWithContext is the same as DeleteFinancialRelationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteFinancialRelationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) DeleteFinancialRelationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteFinancialRelationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteFinancialRelation = "DeleteFinancialRelation"

// DeleteFinancialRelationRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteFinancialRelation operation. The "output" return
// value will be populated with the DeleteFinancialRelationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteFinancialRelationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteFinancialRelationCommon Send returns without error.
//
// See DeleteFinancialRelation for more information on using the DeleteFinancialRelation
// API call, and error handling.
//
//    // Example sending a request using the DeleteFinancialRelationRequest method.
//    req, resp := client.DeleteFinancialRelationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) DeleteFinancialRelationRequest(input *DeleteFinancialRelationInput) (req *request.Request, output *DeleteFinancialRelationOutput) {
	op := &request.Operation{
		Name:       opDeleteFinancialRelation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteFinancialRelationInput{}
	}

	output = &DeleteFinancialRelationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteFinancialRelation API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation DeleteFinancialRelation for usage and error information.
func (c *BILLING) DeleteFinancialRelation(input *DeleteFinancialRelationInput) (*DeleteFinancialRelationOutput, error) {
	req, out := c.DeleteFinancialRelationRequest(input)
	return out, req.Send()
}

// DeleteFinancialRelationWithContext is the same as DeleteFinancialRelation with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteFinancialRelation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) DeleteFinancialRelationWithContext(ctx volcengine.Context, input *DeleteFinancialRelationInput, opts ...request.Option) (*DeleteFinancialRelationOutput, error) {
	req, out := c.DeleteFinancialRelationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteFinancialRelationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Relation is a required field
	Relation *int32 `type:"int32" json:",omitempty" required:"true"`

	// RelationID is a required field
	RelationID *string `type:"string" json:",omitempty" required:"true"`

	// SubAccountID is a required field
	SubAccountID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteFinancialRelationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFinancialRelationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteFinancialRelationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteFinancialRelationInput"}
	if s.Relation == nil {
		invalidParams.Add(request.NewErrParamRequired("Relation"))
	}
	if s.RelationID == nil {
		invalidParams.Add(request.NewErrParamRequired("RelationID"))
	}
	if s.SubAccountID == nil {
		invalidParams.Add(request.NewErrParamRequired("SubAccountID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRelation sets the Relation field's value.
func (s *DeleteFinancialRelationInput) SetRelation(v int32) *DeleteFinancialRelationInput {
	s.Relation = &v
	return s
}

// SetRelationID sets the RelationID field's value.
func (s *DeleteFinancialRelationInput) SetRelationID(v string) *DeleteFinancialRelationInput {
	s.RelationID = &v
	return s
}

// SetSubAccountID sets the SubAccountID field's value.
func (s *DeleteFinancialRelationInput) SetSubAccountID(v int64) *DeleteFinancialRelationInput {
	s.SubAccountID = &v
	return s
}

type DeleteFinancialRelationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IsSuccess *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DeleteFinancialRelationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFinancialRelationOutput) GoString() string {
	return s.String()
}

// SetIsSuccess sets the IsSuccess field's value.
func (s *DeleteFinancialRelationOutput) SetIsSuccess(v bool) *DeleteFinancialRelationOutput {
	s.IsSuccess = &v
	return s
}
