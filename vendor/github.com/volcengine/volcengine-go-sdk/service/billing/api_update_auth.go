// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateAuthCommon = "UpdateAuth"

// UpdateAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAuthCommon operation. The "output" return
// value will be populated with the UpdateAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAuthCommon Send returns without error.
//
// See UpdateAuthCommon for more information on using the UpdateAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateAuthCommonRequest method.
//    req, resp := client.UpdateAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) UpdateAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAuthCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation UpdateAuthCommon for usage and error information.
func (c *BILLING) UpdateAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateAuthCommonRequest(input)
	return out, req.Send()
}

// UpdateAuthCommonWithContext is the same as UpdateAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) UpdateAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateAuth = "UpdateAuth"

// UpdateAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAuth operation. The "output" return
// value will be populated with the UpdateAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAuthCommon Send returns without error.
//
// See UpdateAuth for more information on using the UpdateAuth
// API call, and error handling.
//
//    // Example sending a request using the UpdateAuthRequest method.
//    req, resp := client.UpdateAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) UpdateAuthRequest(input *UpdateAuthInput) (req *request.Request, output *UpdateAuthOutput) {
	op := &request.Operation{
		Name:       opUpdateAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateAuthInput{}
	}

	output = &UpdateAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAuth API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation UpdateAuth for usage and error information.
func (c *BILLING) UpdateAuth(input *UpdateAuthInput) (*UpdateAuthOutput, error) {
	req, out := c.UpdateAuthRequest(input)
	return out, req.Send()
}

// UpdateAuthWithContext is the same as UpdateAuth with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) UpdateAuthWithContext(ctx volcengine.Context, input *UpdateAuthInput, opts ...request.Option) (*UpdateAuthOutput, error) {
	req, out := c.UpdateAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AuthListStr *string `type:"string" json:",omitempty"`

	// RelationID is a required field
	RelationID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateAuthInput"}
	if s.RelationID == nil {
		invalidParams.Add(request.NewErrParamRequired("RelationID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuthListStr sets the AuthListStr field's value.
func (s *UpdateAuthInput) SetAuthListStr(v string) *UpdateAuthInput {
	s.AuthListStr = &v
	return s
}

// SetRelationID sets the RelationID field's value.
func (s *UpdateAuthInput) SetRelationID(v string) *UpdateAuthInput {
	s.RelationID = &v
	return s
}

type UpdateAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IsSuccess *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s UpdateAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAuthOutput) GoString() string {
	return s.String()
}

// SetIsSuccess sets the IsSuccess field's value.
func (s *UpdateAuthOutput) SetIsSuccess(v bool) *UpdateAuthOutput {
	s.IsSuccess = &v
	return s
}
