// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opHandleInvitationCommon = "HandleInvitation"

// HandleInvitationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleInvitationCommon operation. The "output" return
// value will be populated with the HandleInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleInvitationCommon Send returns without error.
//
// See HandleInvitationCommon for more information on using the HandleInvitationCommon
// API call, and error handling.
//
//    // Example sending a request using the HandleInvitationCommonRequest method.
//    req, resp := client.HandleInvitationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) HandleInvitationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opHandleInvitationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleInvitationCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation HandleInvitationCommon for usage and error information.
func (c *BILLING) HandleInvitationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.HandleInvitationCommonRequest(input)
	return out, req.Send()
}

// HandleInvitationCommonWithContext is the same as HandleInvitationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See HandleInvitationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) HandleInvitationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.HandleInvitationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opHandleInvitation = "HandleInvitation"

// HandleInvitationRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleInvitation operation. The "output" return
// value will be populated with the HandleInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleInvitationCommon Send returns without error.
//
// See HandleInvitation for more information on using the HandleInvitation
// API call, and error handling.
//
//    // Example sending a request using the HandleInvitationRequest method.
//    req, resp := client.HandleInvitationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) HandleInvitationRequest(input *HandleInvitationInput) (req *request.Request, output *HandleInvitationOutput) {
	op := &request.Operation{
		Name:       opHandleInvitation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &HandleInvitationInput{}
	}

	output = &HandleInvitationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleInvitation API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation HandleInvitation for usage and error information.
func (c *BILLING) HandleInvitation(input *HandleInvitationInput) (*HandleInvitationOutput, error) {
	req, out := c.HandleInvitationRequest(input)
	return out, req.Send()
}

// HandleInvitationWithContext is the same as HandleInvitation with the addition of
// the ability to pass a context and additional request options.
//
// See HandleInvitation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) HandleInvitationWithContext(ctx volcengine.Context, input *HandleInvitationInput, opts ...request.Option) (*HandleInvitationOutput, error) {
	req, out := c.HandleInvitationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type HandleInvitationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Action is a required field
	Action *int32 `type:"int32" json:",omitempty" required:"true"`

	AuthID *string `type:"string" json:",omitempty"`

	// InvitationType is a required field
	InvitationType *int32 `type:"int32" json:",omitempty" required:"true"`

	MajorAccountID *int64 `type:"int64" json:",omitempty"`

	Relation *int32 `type:"int32" json:",omitempty"`

	// RelationID is a required field
	RelationID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s HandleInvitationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleInvitationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HandleInvitationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "HandleInvitationInput"}
	if s.Action == nil {
		invalidParams.Add(request.NewErrParamRequired("Action"))
	}
	if s.InvitationType == nil {
		invalidParams.Add(request.NewErrParamRequired("InvitationType"))
	}
	if s.RelationID == nil {
		invalidParams.Add(request.NewErrParamRequired("RelationID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAction sets the Action field's value.
func (s *HandleInvitationInput) SetAction(v int32) *HandleInvitationInput {
	s.Action = &v
	return s
}

// SetAuthID sets the AuthID field's value.
func (s *HandleInvitationInput) SetAuthID(v string) *HandleInvitationInput {
	s.AuthID = &v
	return s
}

// SetInvitationType sets the InvitationType field's value.
func (s *HandleInvitationInput) SetInvitationType(v int32) *HandleInvitationInput {
	s.InvitationType = &v
	return s
}

// SetMajorAccountID sets the MajorAccountID field's value.
func (s *HandleInvitationInput) SetMajorAccountID(v int64) *HandleInvitationInput {
	s.MajorAccountID = &v
	return s
}

// SetRelation sets the Relation field's value.
func (s *HandleInvitationInput) SetRelation(v int32) *HandleInvitationInput {
	s.Relation = &v
	return s
}

// SetRelationID sets the RelationID field's value.
func (s *HandleInvitationInput) SetRelationID(v string) *HandleInvitationInput {
	s.RelationID = &v
	return s
}

type HandleInvitationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IsSuccess *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s HandleInvitationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleInvitationOutput) GoString() string {
	return s.String()
}

// SetIsSuccess sets the IsSuccess field's value.
func (s *HandleInvitationOutput) SetIsSuccess(v bool) *HandleInvitationOutput {
	s.IsSuccess = &v
	return s
}
