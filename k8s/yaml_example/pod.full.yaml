# kubectl example pod 可查看每个字段含义
# kubectl example pod.spec
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  namespace: default
  labels:
    - app: example
  annotations:
    - only_allow_string: "1.0" # 仅支持字符串的值类型
spec:
  volumes:
    - name: volumes-emptydir-volume
      emptyDir: { } # 空目录卷是一种用于临时数据存储的卷类型，用于在pod内容器之间共享，生命周期随pod
      hostPath: # 使用主机路径作为卷
        path: "/data_for_pod"
      secret: # 若设置，表示挂载类型为secret类型的卷
        secretName: "volume_secret"
        items:
          - key: "examplecome_tls_cert" # 把证书 以文件形式挂载到 /data/tls_cert
            path: "/data/tls_cert"
      configMap: # 若设置，表示挂载类型为configMap类型的卷
        name:  "volume-configmap"
        items:
          - key: "cert_config"
            path: "/data/cert_config"
  dnsPolicy: "None" # 设置为None，表示不使用kube-dns，而是使用下面自定义的dns服务器（不常用）
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches: # pod解析不带域名的主机名时，这些搜索路径将被附加到主机名上以进行解析
      - ns1.svc.cluster-domain.example
      - my.dns.search.suffix
    options:
      - name: ndots
        value: "2" # 当主机名中包含的点数小于 2 时，DNS 解析会附加搜索路径
      - name: edns0 # 启用了 EDNS0

  restartPolicy: OnFailure # pod重启策略
  imagePullSecrets: #  拉取镜像时使用的secret
    - name: "dqwdq21d12d"
  hostNetwork: false # 使用主机网络，一般false
  initContainers:
    - name: init-container-1
      # 初始容器可配置项与正常容器一致，它先于正常容器执行
  containers:
    - name: container-1 # 若只有1个容器，可省略
      image: busybox
      ports: # 容器暴露端口
        - name: "http-port"
          containerPort: 80
          hostPort: 80
          protocol: TCP  # or UDP
      env:
        - name: LOG_LEVEL
          value: debug
      resources:
        limits: #  容器能使用的最大资源，超出限制容器可能会被终止或受到严重限制
          cpu: "0.1" # 默认单位为内核数，0.1等价100m（milli cpu）
          memory: "128MiB" # 单位支持 MiB、GiB、MB、GB （MiB=1024*1024B，MB=1000*1000B）
        requests: # pod调度的最低要求，若资源不足，则无法调度
          cpu: "0.1"
          memory: "128MiB"
      imagePullPolicy: IfNotPresent # 支持3种下载策略：always/never/IfNotPresent，默认最后
      command: [ "/bin/sh", "-c" ] # 也可把args放到command中，sh省略后使用默认shell解释器
      args: [ 'echo "Hello k8s!"; sleep 3000' ]
      workingDir: /data
      volumeMounts:
        - mountPath: /volumes-emptydir-mount-path # 临时卷挂载到这个目录
          name: volumes-emptydir-volume
          readOnly: true
      livenessProbe: # 存活探针 探测方式由多种，使用其中一种即可
        exec:
          command: [ "sh", "-c", "echo liveness"]
        tcpSocket:
          port: 80
        httpGet:
          httpHeaders:
            - name: X-Custom-Header
              value: Awesome
          # when "host" is not defined, "PodIP" will be used
          # host: my-host
          # when "scheme" is not defined, "HTTP" scheme will be used. Only "HTTP" and "HTTPS" are allowed
          # scheme: HTTPS
          path: /healthz
          port: 8080
        initialDelaySeconds: 15
        timeoutSeconds: 1
        periodSeconds: 10
        successThreshold: 1 # 连续多少次探测成功才算成功
        failureThreshold: 5 # 连续多少次探测失败才算失败
      readinessProbe: # 就绪探针
        exec:
          command: [ "sh", "-c", "echo readiness" ]
      lifecycle: # 正常容器的两个回调
        postStart: # 必须执行成功 才会启动正常容器
          httpGet:
            port: 80
            host: www.baidu.com
            scheme: http
            path: /xxx
        preStop:
          exec:
            command: [ "sh", "-c", "echo 'preStop callback done!'"]
      securityContext: # 容器的安全配置
        privileged: false
        runAsNonRoot: false
        runAsUser: 1000 # uid
        runAsGroup: 1000 # gid
        procMount: "Unmasked" # 可以设置为 "Default"、"Unmasked" 或 "Masked"
        readOnlyRootFilesystem: true


#    - name: container-2  一个pod内可包含多个容器